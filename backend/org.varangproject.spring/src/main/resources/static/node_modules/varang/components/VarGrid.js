"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var core_2 = require("./core");
// <VarGridClientPagerParams [pageSize]='11' [sord]='ASC' [sidx]='id' [pageStart]='0' [pageSizes]='[10,20,50]'>
// 		fff</VarGridClientPagerParams>
var VarGridRemoteDataProviderMapping = (function () {
    function VarGridRemoteDataProviderMapping(elementRef) {
        this.elementRef = elementRef;
        // @ViewChild(TodoInputComponent) inputComponent: TodoInputComponent
        //@ViewChild('wrapper') wrapper;
        this.content = "{}";
        this.data = new core_2.RemoteDataProvider();
        this.content = this.elementRef.nativeElement.innerHTML;
    }
    // to ensure bindings have been resolved
    // see also 
    // https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html#!#aftercontent
    VarGridRemoteDataProviderMapping.prototype.ngAfterContentInit = function () {
        this.content = this.elementRef.nativeElement.innerHTML;
        var json = JSON.parse(JSON.parse(JSON.stringify(this.content)));
        //alert(JSON.stringify(json.in.));
        this.data.in.jasonXPath.list = json.in.jsonXPath.list;
        this.data.in.jasonXPath.pageSize = json.in.jsonXPath.pageSize;
        this.data.in.jasonXPath.pageIndex = json.in.jsonXPath.pageIndex;
        this.data.in.jasonXPath.total = json.in.jsonXPath.total;
        this.data.out.pageSize = json.out.pageSize;
        this.data.out.pageStart = json.out.pageStart;
        this.data.out.sortIndex = json.out.sortIndex;
        this.data.out.sortOrder = json.out.sortOrder;
    };
    VarGridRemoteDataProviderMapping = __decorate([
        core_1.Component({
            selector: "VarGridRemoteDataProviderMapping",
            template: "<ng-content></ng-content>"
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], VarGridRemoteDataProviderMapping);
    return VarGridRemoteDataProviderMapping;
}());
exports.VarGridRemoteDataProviderMapping = VarGridRemoteDataProviderMapping;
var VarGridClientPagerParams = (function () {
    function VarGridClientPagerParams(elementRef) {
        this.elementRef = elementRef;
        this.content = "{}";
        this.data = new core_2.ClientPagerParams();
        this.content = this.elementRef.nativeElement.innerHTML;
    }
    VarGridClientPagerParams.prototype.ngAfterContentInit = function () {
        this.content = this.elementRef.nativeElement.innerHTML;
        var json = JSON.parse(JSON.parse(JSON.stringify(this.content)));
        this.data.pageSize = json.pageSize;
        this.data.pageSizes = json.pageSizes;
        this.data.pageStart = json.pageStart;
        this.data.sortIndex = json.sortIndex;
        this.data.sortOrder = json.sortOrder;
    };
    VarGridClientPagerParams = __decorate([
        core_1.Component({
            selector: "VarGridClientPagerParams",
            template: "<ng-content></ng-content>"
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], VarGridClientPagerParams);
    return VarGridClientPagerParams;
}());
exports.VarGridClientPagerParams = VarGridClientPagerParams;
var VarGridColumn = (function () {
    function VarGridColumn() {
    }
    VarGridColumn.prototype.ngAfterContentInit = function () {
        // console.log(this.input);
        //alert("vargridrow-aftercontentchecked");
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridColumn.prototype, "label", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridColumn.prototype, "name", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridColumn.prototype, "searchOptions", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridColumn.prototype, "styleClass", void 0);
    VarGridColumn = __decorate([
        core_1.Component({
            selector: "VarGridColumn",
            template: "<ng-content></ng-content>"
        }), 
        __metadata('design:paramtypes', [])
    ], VarGridColumn);
    return VarGridColumn;
}());
exports.VarGridColumn = VarGridColumn;
var VarGridColumnView = (function () {
    function VarGridColumnView() {
        this.content = "cell__1";
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridColumnView.prototype, "label", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridColumnView.prototype, "name", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridColumnView.prototype, "searchOptions", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridColumnView.prototype, "styleClass", void 0);
    VarGridColumnView = __decorate([
        core_1.Component({
            selector: "[VarGridColumnView]",
            template: "<ng-content></ng-content>"
        }), 
        __metadata('design:paramtypes', [])
    ], VarGridColumnView);
    return VarGridColumnView;
}());
exports.VarGridColumnView = VarGridColumnView;
var VarGridRow = (function () {
    function VarGridRow() {
    }
    VarGridRow.prototype.ngAfterContentInit = function () {
        // alert("childdefs:"+this.coldefs.length);
        // console.log(this.input);
        //alert("vargridrow-aftercontentchecked");
        // alert(this.Columns.first.styleClass);
    };
    __decorate([
        core_1.ContentChildren(VarGridColumn), 
        __metadata('design:type', core_1.QueryList)
    ], VarGridRow.prototype, "coldefs", void 0);
    VarGridRow = __decorate([
        core_1.Component({
            selector: "VarGridRow",
            template: "<ng-content></ng-content>"
        }), 
        __metadata('design:paramtypes', [])
    ], VarGridRow);
    return VarGridRow;
}());
exports.VarGridRow = VarGridRow;
var VarGridRowView = (function () {
    function VarGridRowView() {
        this.cells = [];
        // this.cells.push(new VarGridColumnView());
        // this.cells.push(new VarGridColumnView());
        // this.cells.push(new VarGridColumnView());
        // this.cells.push(new VarGridColumnView());
        // this.cells[0].content="row1data0";
        // this.cells[1].content="row1data1";
        // this.cells[2].content="row1data2";
        // this.cells[3].content="row1data3";
    }
    VarGridRowView.prototype.ngAfterContentInit = function () {
        // console.log(this.input);
        //alert("vargridrow-aftercontentchecked");
        //alert(this.columns.first.styleClass);
    };
    __decorate([
        core_1.ContentChildren(VarGridColumnView), 
        __metadata('design:type', core_1.QueryList)
    ], VarGridRowView.prototype, "columns", void 0);
    VarGridRowView = __decorate([
        core_1.Component({
            selector: "[VarGridRowView]",
            directives: [VarGridColumnView],
            template: "\n        <ng-content></ng-content>\n        "
        }), 
        __metadata('design:paramtypes', [])
    ], VarGridRowView);
    return VarGridRowView;
}());
exports.VarGridRowView = VarGridRowView;
var VarGridDataSource = (function () {
    function VarGridDataSource(elementRef) {
        this.elementRef = elementRef;
        this.content = "{}";
        this.properties = new core_2.DataSourceProperties();
        this.content = this.elementRef.nativeElement.innerHTML;
    }
    VarGridDataSource.prototype.ngAfterContentInit = function () {
        this.content = this.elementRef.nativeElement.innerHTML;
        var data = JSON.parse(JSON.parse(JSON.stringify(this.content)));
        this.properties.url = data.url;
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridDataSource.prototype, "url", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridDataSource.prototype, "methodType", void 0);
    __decorate([
        //get post
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridDataSource.prototype, "serverType", void 0);
    __decorate([
        //rest, solr, mongodb
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridDataSource.prototype, "dataOrigin", void 0);
    __decorate([
        //local, remote
        core_1.Input(), 
        __metadata('design:type', Array)
    ], VarGridDataSource.prototype, "localDataSource", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], VarGridDataSource.prototype, "loadOnInit", void 0);
    VarGridDataSource = __decorate([
        core_1.Component({
            selector: "VarGridDataSource",
            template: "<ng-content></ng-content>"
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], VarGridDataSource);
    return VarGridDataSource;
}());
exports.VarGridDataSource = VarGridDataSource;
var VarGridHeaderColumnView = (function () {
    function VarGridHeaderColumnView() {
    }
    //   constructor(@Inject(ElementRef) element: ElementRef) {
    //     this.content = element.nativeElement.innerHTML;
    //         // this.content = this.elementRef.nativeElement.innerHTML;
    //         // this.content = "header!!";
    //         //alert("headerColumnview:content:"+this.content);
    //   }
    // constructor(private elementRef:ElementRef) {
    //       //this.content = this.elementRef.nativeElement.innerHTML;
    // }
    VarGridHeaderColumnView.prototype.ngAfterContentInit = function () {
        //this.content = this.elementRef.nativeElement.innerHTML;
        //alert("content"+this.elementRef.nativeElement.innerHTML);
        // console.log(this.input);
        //alert("vargridrow-aftercontentchecked");
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridHeaderColumnView.prototype, "label", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridHeaderColumnView.prototype, "name", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridHeaderColumnView.prototype, "searchOptions", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], VarGridHeaderColumnView.prototype, "styleClass", void 0);
    VarGridHeaderColumnView = __decorate([
        core_1.Component({
            selector: "[VarGridHeaderColumnView]",
            template: "<ng-content></ng-content>"
        }), 
        __metadata('design:paramtypes', [])
    ], VarGridHeaderColumnView);
    return VarGridHeaderColumnView;
}());
exports.VarGridHeaderColumnView = VarGridHeaderColumnView;
var VarGridHeaderRowView = (function () {
    function VarGridHeaderRowView() {
    }
    VarGridHeaderRowView.prototype.ngAfterContentInit = function () {
        //alert("size:"+this.columns.length);
        // console.log(this.input);
        //alert("vargridrow-aftercontentchecked");
        // alert(this.Columns.first.styleClass);
    };
    __decorate([
        core_1.ContentChildren(VarGridHeaderColumnView), 
        __metadata('design:type', core_1.QueryList)
    ], VarGridHeaderRowView.prototype, "columns", void 0);
    VarGridHeaderRowView = __decorate([
        core_1.Component({
            selector: "[VarGridHeaderRowView]",
            directives: [VarGridHeaderColumnView],
            template: "\n    <th VarGridHeaderColumnView *ngFor=\"let column of columns\"  >{{column.content}}</th>\n  "
        }), 
        __metadata('design:paramtypes', [])
    ], VarGridHeaderRowView);
    return VarGridHeaderRowView;
}());
exports.VarGridHeaderRowView = VarGridHeaderRowView;
//<th VarGridHeaderColumnView>Header1</th>
//        <th VarGridHeaderColumnView>Header2</th>
//      <th VarGridHeaderColumnView>Header3</th>
//[class.up]="headerActions['{{header.label}}'].toggle===true"
var VarGrid = (function () {
    function VarGrid(http) {
        this.http = http;
        this.headers = [];
        this.rows = [];
        this.headerActions = {};
    }
    VarGrid.prototype.copyColumnView = function (declaredColumns) {
        var cols = [];
        declaredColumns.forEach(function (declaredColumn) {
            var col = new VarGridColumnView();
            col.name = declaredColumn.name;
            col.label = declaredColumn.label;
            col.searchOptions = declaredColumn.searchOptions;
            col.styleClass = declaredColumn.styleClass;
            cols.push(col);
        });
        return cols;
    };
    VarGrid.prototype.findColumnViewIndexByName = function (cols, key) {
        for (var i = 0; i < cols.length; i++)
            if (cols[i].name == key)
                return i;
        return -1;
    };
    VarGrid.prototype.loadLocalDataOnInitializaton = function (data) {
        var _this = this;
        if (data === undefined || data.length == 0)
            return;
        //TODO, apply mapping of a best practice
        data.forEach(function (row) {
            var newrow = new VarGridRowView();
            var cols = _this.copyColumnView(_this.rowdef.coldefs);
            Object.keys(row).forEach(function (key) {
                var idx = _this.findColumnViewIndexByName(cols, key);
                if (idx != -1)
                    cols[idx].content = row[key];
            });
            cols.forEach(function (col) { return newrow.cells.push(col); });
            _this.rows.push(newrow);
        });
    };
    VarGrid.prototype.xpathtoJsonProperty = function (json, xpath) {
        var idx = xpath.indexOf('.');
        if (idx == -1)
            return json[xpath];
        var propName = xpath.substring(0, idx);
        return this.xpathtoJsonProperty(json[propName], xpath.substring(idx + 1));
    };
    VarGrid.prototype.loadRemoteData = function (data) {
        var bodyString = JSON.parse(JSON.stringify(data))._body;
        var griddata = JSON.parse(bodyString);
        var rows = this.xpathtoJsonProperty(griddata, this.remoteDataProviderMapping.data.in.jasonXPath.list);
        //let rows:any[] = griddata._embedded.persons;
        if (rows === undefined || rows.length == 0)
            return;
        this.loadLocalDataOnInitializaton(rows);
    };
    VarGrid.prototype.buildGetParams = function () {
        var params = this.buildPostParams();
        var paramstring = "";
        Object.keys(params).forEach(function (key) { return paramstring += "&" + key + "=" + params[key]; });
        return "?" + paramstring.substring(1);
    };
    VarGrid.prototype.buildPostParams = function () {
        var hash = {};
        hash[this.remoteDataProviderMapping.data.out.pageStart] = this.clientPagerParams.data.pageStart;
        hash[this.remoteDataProviderMapping.data.out.pageSize] = this.clientPagerParams.data.pageSize;
        hash[this.remoteDataProviderMapping.data.out.sortIndex] = this.clientPagerParams.data.sortIndex;
        hash[this.remoteDataProviderMapping.data.out.sortOrder] = this.clientPagerParams.data.sortOrder;
        if (this.dataSource.serverType === "spring-datarest") {
            hash[this.remoteDataProviderMapping.data.out.sortOrder] = new SpringDataDriver().buildGridSortOrder(this);
        }
        return hash;
    };
    VarGrid.prototype.fetchRemoteDataOnInitializaton = function (url) {
        var _this = this;
        var headers = new http_1.Headers({ 'Content-type': 'application/json' });
        if (this.dataSource.methodType.toUpperCase() === "POST")
            this.http.post(this.dataSource.properties.url, JSON.stringify(this.buildPostParams()), { headers: headers })
                .subscribe(function (data) { return _this.loadRemoteData(data); }, function (error) { return console.log(error); });
        else
            this.http.get(url + this.buildGetParams(), { headers: headers })
                .subscribe(function (data) { return _this.loadRemoteData(data); }, function (error) { return console.log(error); });
    };
    VarGrid.prototype.loadHeaders = function () {
        var _this = this;
        this.rowdef.coldefs.forEach(function (declaredColumn) {
            var col = new VarGridHeaderColumnView();
            col.content = declaredColumn.label;
            col.label = declaredColumn.label;
            col.name = declaredColumn.name;
            _this.headerActions[col.label] = new core_2.VarGridHeaderAction(col.name, _this.clientPagerParams.data.sortOrder === "ASC" ? true : false);
            _this.headers.push(col);
        });
    };
    VarGrid.prototype.initGrid = function () {
        if (this.dataSource.loadOnInit) {
            this.loadHeaders();
            if (this.dataSource.dataOrigin === "local")
                this.loadLocalDataOnInitializaton(this.dataSource.localDataSource);
            else if (this.dataSource.dataOrigin === "remote")
                this.fetchRemoteDataOnInitializaton(this.dataSource.properties.url);
        }
    };
    VarGrid.prototype.reloadGrid = function () {
        this.clearGrid();
        this.initGrid();
    };
    VarGrid.prototype.ngAfterContentInit = function () {
        this.dataSource.methodType = "GET";
        this.dataSource.dataOrigin = "remote";
        this.dataSource.serverType = "spring-datarest";
        this.initGrid();
    };
    ////methods
    VarGrid.prototype.clearGrid = function () {
        this.rows = null;
        this.rows = [];
        this.headers = null;
        this.headers = [];
        // this.headerActions = null;
        // this.headerActions = {};
    };
    //// events
    VarGrid.prototype.seekToFirstPage = function () {
        this.clientPagerParams.data.pageStart = 0;
        this.seekToPage();
    };
    VarGrid.prototype.seekToLastPage = function () {
        this.seekToPage();
    };
    VarGrid.prototype.seekToNextPage = function () {
        this.clientPagerParams.data.pageStart = this.clientPagerParams.data.pageStart + 1;
        this.seekToPage();
    };
    VarGrid.prototype.seekToPreviousPage = function () {
        this.clientPagerParams.data.pageStart = this.clientPagerParams.data.pageStart - 1;
        this.seekToPage();
    };
    VarGrid.prototype.seekToPage = function () {
        if (this.clientPagerParams.data.pageStart == -1)
            return;
        this.reloadGrid();
    };
    VarGrid.prototype.onHeaderClicked = function (event, name) {
        this.headerActions[name].enabled = true;
        this.headerActions[name].toggle = !this.headerActions[name].toggle;
        this.clientPagerParams.data.sortOrder = this.headerActions[name].sord();
        this.clientPagerParams.data.sortIndex = name;
        this.reloadGrid();
    };
    __decorate([
        core_1.ContentChild(VarGridRemoteDataProviderMapping), 
        __metadata('design:type', VarGridRemoteDataProviderMapping)
    ], VarGrid.prototype, "remoteDataProviderMapping", void 0);
    __decorate([
        core_1.ContentChild(VarGridClientPagerParams), 
        __metadata('design:type', VarGridClientPagerParams)
    ], VarGrid.prototype, "clientPagerParams", void 0);
    __decorate([
        core_1.ContentChild(VarGridHeaderRowView), 
        __metadata('design:type', VarGridHeaderRowView)
    ], VarGrid.prototype, "headerRow", void 0);
    __decorate([
        core_1.ContentChild(VarGridDataSource), 
        __metadata('design:type', VarGridDataSource)
    ], VarGrid.prototype, "dataSource", void 0);
    __decorate([
        core_1.ContentChild(VarGridRow), 
        __metadata('design:type', VarGridRow)
    ], VarGrid.prototype, "rowdef", void 0);
    __decorate([
        core_1.ContentChildren(VarGridColumn), 
        __metadata('design:type', core_1.QueryList)
    ], VarGrid.prototype, "coldefs", void 0);
    VarGrid = __decorate([
        core_1.Component({
            selector: "VarGrid",
            //encapsulation: ViewEncapsulation.Emulated,
            directives: [VarGridHeaderRowView, VarGridHeaderColumnView, VarGridRowView, VarGridColumnView, VarGridDataSource],
            template: "\n    <table class=\"ui celled table\">\n      <thead>\n        <tr>  \n          <th VarGridHeaderColumnView  *ngFor=\"let header of headers\">\n            <span (click)=\"onHeaderClicked($event, header.label)\"><span>{{header.label}}</span><i  class=\"angle icon\" [class.up]=\"headerActions[header.label].toggle===true\" [class.down]=\"headerActions[header.label].toggle===false\" ></i></span>\n           </th>\n         </tr>\n          \n       </thead>\n       <tbody >\n\n        <tr VarGridRowView  *ngFor=\"let row of rows\">\n            <td VarGridColumnView *ngFor=\"let cell of row.cells\">{{cell.content}}</td>\n        </tr>\n       </tbody>\n       <tfoot>\n          <tr><th colspan=\"3\">\n          <div class=\"ui right floated pagination menu\">\n            <a class=\"icon item\" (click)=\"seekToFirstPage()\"><i class=\"angle double left icon\" ></i></a>\n            <a class=\"icon item\" (click)=\"seekToPreviousPage()\"><i class=\"angle left icon\" ></i></a>\n            <a class=\"icon item\" (click)=\"seekToNextPage()\"><i class=\"angle right  icon\" ></i></a>\n            <a class=\"icon item\" (click)=\"seekToLastPage()\"><i class=\"angle double right icon\" ></i></a>\n          </div>\n          </th>\n          </tr>\n        </tfoot>\n    </table>\n\t"
        }), 
        __metadata('design:paramtypes', [http_1.Http])
    ], VarGrid);
    return VarGrid;
}());
exports.VarGrid = VarGrid;
var SpringDataDriver = (function () {
    function SpringDataDriver() {
    }
    SpringDataDriver.prototype.buildGridSortOrder = function (obj) {
        return obj.clientPagerParams.data.sortIndex + "," + obj.clientPagerParams.data.sortOrder.toLowerCase();
        //,headerActions:{ [label: string] : VarGridHeaderAction
        //let param:string="";
        // for (var label in headerActions){
        //     let ha:VarGridHeaderAction= headerActions[label];
        //     if (ha.enabled) 
        //       param+="&"+"sort="+ha.name + "," + ha.sord().toLowerCase();
        // }
        // if (param.length>0)
        //   return param.substring(1);
        // return "";
    };
    return SpringDataDriver;
}());
exports.SpringDataDriver = SpringDataDriver;
//# sourceMappingURL=VarGrid.js.map